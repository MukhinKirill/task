// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task.DbModule.Data;

#nullable disable

namespace Task.WebApi.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20241121141557_FirstTestBase")]
    partial class FirstTestBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task.DbModule.Models.ITRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorporatePhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("corporatePhoneNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ITRole", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.DbModule.Models.Password", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserLogin");

                    b.ToTable("Passwords", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.DbModule.Models.RequestRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("RequestRight", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.DbModule.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstName");

                    b.Property<bool>("IsLead")
                        .HasColumnType("bit")
                        .HasColumnName("isLead");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middleName");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telephoneNumber");

                    b.HasKey("Login");

                    b.ToTable("User", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.DbModule.Models.UserITRole", b =>
                {
                    b.Property<int>("ITRoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("ITRoleId", "UserLogin");

                    b.HasIndex("UserLogin");

                    b.ToTable("UserITRole", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.DbModule.Models.UserRequestRight", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<int>("RequestRightId")
                        .HasColumnType("int")
                        .HasColumnName("rightId");

                    b.HasKey("UserLogin", "RequestRightId");

                    b.HasIndex("RequestRightId");

                    b.ToTable("UserRequestRight", "TestTaskSchema");
                });

            modelBuilder.Entity("Task.DbModule.Models.Password", b =>
                {
                    b.HasOne("Task.DbModule.Models.User", "User")
                        .WithMany("Passwords")
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task.DbModule.Models.UserITRole", b =>
                {
                    b.HasOne("Task.DbModule.Models.ITRole", "ITRole")
                        .WithMany("UserITRoles")
                        .HasForeignKey("ITRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task.DbModule.Models.User", "User")
                        .WithMany("UserITRoles")
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ITRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task.DbModule.Models.UserRequestRight", b =>
                {
                    b.HasOne("Task.DbModule.Models.RequestRight", "RequestRight")
                        .WithMany("UserRequestRights")
                        .HasForeignKey("RequestRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task.DbModule.Models.User", "User")
                        .WithMany("UserRequestRights")
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestRight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task.DbModule.Models.ITRole", b =>
                {
                    b.Navigation("UserITRoles");
                });

            modelBuilder.Entity("Task.DbModule.Models.RequestRight", b =>
                {
                    b.Navigation("UserRequestRights");
                });

            modelBuilder.Entity("Task.DbModule.Models.User", b =>
                {
                    b.Navigation("Passwords");

                    b.Navigation("UserITRoles");

                    b.Navigation("UserRequestRights");
                });
#pragma warning restore 612, 618
        }
    }
}
